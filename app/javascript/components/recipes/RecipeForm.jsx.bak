import React from 'react'
// import Chip from '@material-ui/core/Chip'
// import Input from '@material-ui/core/Input'
// import MenuItem from '@material-ui/core/MenuItem'
import { withStyles } from '@material-ui/core/styles'
// import Multiselect from 'react-widgets/lib/Multiselect'
import { Field, reduxForm } from 'redux-form'
import RecipeFormStyles from './RecipeFormStyles'

const styles = () => (RecipeFormStyles)

let RecipeForm = props => {
  const { handleSubmit, classes } = props
  const sources = ['Erik', 'Hannah']
  // const [personName, setPersonName] = React.useState([]);

  // const handleChange = event => {
  //   setPersonName(event.target.value);
  // };
  return (
    <form onSubmit={handleSubmit}>
      <div className={classes.container}>
        <label className={classes.itemAlabel} htmlFor="firstName">Name</label>
        <Field className={classes.itemAfield} name="firstName" component="input" type="text" />
        <label className={classes.itemBlabel} htmlFor="lastName">Description</label>
        <Field className={classes.itemBfield} name="lastName" component="input" type="text" />
        <label className={classes.itemClabel} htmlFor="email">Instructions</label>
        <Field className={classes.itemCfield} name="email" component="input" type="email" />
      </div>
      {/* <div>
        <label>Hobbies</label>
        <Field
          name="hobbies"
          component={Multiselect}
          defaultValue={[]}
          onBlur={() => props.onBlur()}
          data={[ 'Guitar', 'Cycling', 'Hiking' ]}/>
      </div> */}



      {/* <Field name="favoriteColor" component="select"> */}
      {/* <Field name="favoriteColor" component="multiSelect" type="multiSelect">
        <option value="">Select a source...</option>
          {sources.map(source => (
            <option value={source} key={source}>
          {source}
        </option>
        ))}
      </Field> */}
      {/* <Select name="source" multiple
      renderValue={selected => (
        <div className={classes.chips}>
          {selected.map(value => (
            <Chip key={value} label={value} className={classes.chip} />
          ))}
        </div>
        >
        <option value="">Select a source...</option>
          {sources.map(source => (
            <option value={source} key={source}>
          {source}
        </option>
        ))}
      </Select> */}
      {/* <Select
          labelId="demo-mutiple-chip-label"
          id="demo-mutiple-chip"
          multiple
          value={personName}
          onChange={handleChange}
          input={<Input id="select-multiple-chip" />}
          renderValue={selected => (
            <div className={classes.chips}>
              {selected.map(value => (
                <Chip key={value} label={value} className={classes.chip} />
              ))}
            </div>
          )}
          MenuProps={MenuProps}
        > */}
          {/* {sources.map(name => (
            <MenuItem key={name} value={name}>
              {name}
            </MenuItem>
          ))}
        </Select> */}
      {/* add a new container here for dynamic ingredient rows https://stackoverflow.com/questions/43115822/can-i-make-a-css-grid-with-dynamic-number-of-rows-or-columns */}
      <button type="submit">Save</button>
    </form>
  )
}

RecipeForm = reduxForm({
  // a unique name for the form
  form: 'recipeForm'
})(RecipeForm)

export default withStyles(styles)(RecipeForm)
// export default RecipeForm